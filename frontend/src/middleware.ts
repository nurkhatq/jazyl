import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const hostname = request.headers.get('host') || ''
  const pathname = request.nextUrl.pathname
  
  // –ü–æ–ª—É—á–∞–µ–º subdomain
  let subdomain = ''
  let isAdmin = false
  
  if (hostname.includes('.jazyl.tech')) {
    const hostParts = hostname.split('.jazyl.tech')[0]
    
    if (hostParts.startsWith('admin.')) {
      isAdmin = true
      subdomain = hostParts.substring(6) // —É–±–∏—Ä–∞–µ–º 'admin.'
    } else {
      subdomain = hostParts
    }
  }
  
  console.log('üü¢ MIDDLEWARE:', {
    hostname,
    subdomain,
    pathname,
    cookies: {
      'auth-user': request.cookies.get('auth-user')?.value.substring(0, 50) + '...' || 'undefined...',
      'auth-data': request.cookies.get('auth-data')?.value.substring(0, 50) + '...' || 'undefined...',
      'access-token': request.cookies.get('access-token')?.value.substring(0, 50) + '...' || 'undefined...'
    }
  })
  
  // –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω (jazyl.tech –∏–ª–∏ www.jazyl.tech)
  if (!subdomain || subdomain === 'www' || subdomain === 'jazyl') {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    if (pathname === '/') {
      return NextResponse.rewrite(new URL('/platform', request.url))
    }
    return NextResponse.next()
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ admin –ø–æ–¥–¥–æ–º–µ–Ω
  if (isAdmin) {
    console.log('üîê ADMIN ACCESS for subdomain:', subdomain)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è admin –ø—É—Ç–µ–π
    const isAuthPath = pathname.startsWith('/login') || pathname.startsWith('/register')
    const isPublicPath = pathname.startsWith('/_next') || 
                        pathname.startsWith('/api') || 
                        pathname === '/favicon.ico' ||
                        pathname === '/robots.txt' ||
                        pathname === '/404'
    
    if (!isAuthPath && !isPublicPath) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω
      const accessToken = request.cookies.get('access-token')
      
      if (!accessToken) {
        console.log('üö´ No auth token, redirecting to login')
        return NextResponse.redirect(new URL('/login', request.url))
      }
    }
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ admin –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    console.log('üü¢ ADMIN PATH, allowing:', pathname)
    return NextResponse.next()
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–¥–¥–æ–º–µ–Ω (–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
  console.log('üåê CLIENT ACCESS for subdomain:', subdomain)
  
  // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  const isPublicClientPath = pathname === '/' ||
                            pathname.startsWith('/_next') ||
                            pathname.startsWith('/api') ||
                            pathname === '/favicon.ico' ||
                            pathname === '/robots.txt' ||
                            pathname.startsWith('/booking') ||
                            pathname.startsWith('/confirm') ||
                            pathname.startsWith('/cancel') ||
                            pathname === '/404'
  
  if (isPublicClientPath) {
    console.log('üü¢ PUBLIC PATH, allowing:', pathname)
    return NextResponse.next()
  }
  
  // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 404
  console.log('‚ùå Path not found for client site:', pathname)
  return NextResponse.rewrite(new URL('/404', request.url))
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - robots.txt
     */
    '/((?!_next/static|_next/image|favicon.ico|robots.txt).*)',
  ],
}