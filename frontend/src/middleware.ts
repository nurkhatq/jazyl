import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const hostname = request.headers.get('host') || ''
  const pathname = request.nextUrl.pathname
  
  console.log('üîç MIDDLEWARE:', { hostname, pathname })
  
  // –ü–æ–ª—É—á–∞–µ–º subdomain
  let subdomain = ''
  
  if (hostname.includes('.jazyl.tech')) {
    const hostParts = hostname.split('.jazyl.tech')[0]
    subdomain = hostParts
  }
  
  console.log('üîç SUBDOMAIN:', subdomain)
  
  // –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω jazyl.tech
  if (!subdomain || subdomain === 'www' || subdomain === 'jazyl') {
    console.log('üåê MAIN DOMAIN')
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –Ω–∞ jazyl.tech/dashboard - —ç—Ç–æ –∞–¥–º–∏–Ω–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if (pathname.startsWith('/dashboard')) {
      console.log('üîê PLATFORM ADMIN ACCESS')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è admin –ø—É—Ç–µ–π
      const isAuthPath = pathname.startsWith('/login') || pathname.startsWith('/register')
      const isPublicPath = pathname.startsWith('/_next') || 
                          pathname.startsWith('/api') || 
                          pathname === '/favicon.ico' ||
                          pathname === '/robots.txt' ||
                          pathname === '/404'
      
      if (!isAuthPath && !isPublicPath) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω
        const accessToken = request.cookies.get('access-token')
        
        if (!accessToken) {
          console.log('üö´ No auth token, redirecting to login')
          return NextResponse.redirect(new URL('/login', request.url))
        }
      }
      
      console.log('üü¢ PLATFORM ADMIN PATH, allowing:', pathname)
      return NextResponse.next()
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –Ω–∞ jazyl.tech –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    if (pathname === '/') {
      return NextResponse.rewrite(new URL('/platform', request.url))
    }
    
    return NextResponse.next()
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–¥–æ–º–µ–Ω (–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ <barber-name>.jazyl.tech)
  if (subdomain) {
    console.log('üåê CLIENT ACCESS for subdomain:', subdomain)
    
    // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    const isPublicClientPath = pathname === '/' ||
                              pathname.startsWith('/_next') ||
                              pathname.startsWith('/api') ||
                              pathname === '/favicon.ico' ||
                              pathname === '/robots.txt' ||
                              pathname.startsWith('/booking') ||
                              pathname.startsWith('/confirm') ||
                              pathname.startsWith('/cancel') ||
                              pathname === '/404'
    
    if (isPublicClientPath) {
      console.log('üü¢ PUBLIC PATH, allowing:', pathname)
      return NextResponse.next()
    }
    
    // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 404
    console.log('‚ùå Path not found for client site:', pathname)
    return NextResponse.rewrite(new URL('/404', request.url))
  }
  
  console.log('üü¢ FALLBACK, allowing:', pathname)
  return NextResponse.next()
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - robots.txt
     */
    '/((?!_next/static|_next/image|favicon.ico|robots.txt).*)',
  ],
}