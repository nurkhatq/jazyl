from fastapi import APIRouter, Depends, HTTPException, Request, status, Query, File, UploadFile
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, func, case, delete
from typing import List, Optional
from uuid import UUID
from datetime import date, datetime, timedelta

from app.schemas.user import UserCreate
from app.services.auth import AuthService
import secrets
import string
from app.api.services import get_current_user_optional
from app.database import get_db
from app.models.user import User, UserRole
from app.models.master import Master, MasterSchedule
from app.models.booking import Booking, BookingStatus
from app.models.tenant import Tenant
from app.utils.email import EmailService
from app.schemas.master import (
    MasterUpdate, MasterResponse, MasterPermissionsUpdate, MasterCreate,
    MasterStatsResponse, TodayBookingsResponse
)
from app.models.permission_request import PermissionRequestType
from app.models.master import MasterSchedule
from app.services.master import MasterService
from app.services.file_upload import FileUploadService
from app.services.permission_request import PermissionRequestService
from app.utils.security import get_current_master, get_current_user, require_role, get_current_tenant

router = APIRouter()

# ---------------------- Utility functions ----------------------
async def get_tenant_id_from_header(request: Request) -> Optional[UUID]:
    tenant_id_str = request.headers.get("X-Tenant-ID")
    if tenant_id_str:
        try:
            return UUID(tenant_id_str)
        except ValueError:
            return None
    return None

async def create_default_schedule(master_id: UUID, db: AsyncSession):
    """–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É 9:00-18:00
        default_schedules = []
        for day in range(5):  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞ (0-4)
            schedule = MasterSchedule(
                master_id=master_id,
                day_of_week=day,
                start_time="09:00",
                end_time="18:00",
                is_working=True
            )
            default_schedules.append(schedule)
        
        # –°—É–±–±–æ—Ç–∞ 10:00-16:00
        saturday_schedule = MasterSchedule(
            master_id=master_id,
            day_of_week=5,  # –°—É–±–±–æ—Ç–∞
            start_time="10:00",
            end_time="16:00",
            is_working=True
        )
        default_schedules.append(saturday_schedule)
        
        # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω–æ–π
        sunday_schedule = MasterSchedule(
            master_id=master_id,
            day_of_week=6,  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            start_time="00:00",
            end_time="00:00",
            is_working=False
        )
        default_schedules.append(sunday_schedule)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑—É
        for schedule in default_schedules:
            db.add(schedule)
        
        await db.commit()
        print(f"‚úÖ Created default schedule for master {master_id}")
        
    except Exception as e:
        print(f"‚ùå Error creating default schedule: {e}")
        # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞

# ====================== ‚≠ê –í–ê–ñ–ù–û: –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –†–û–£–¢–´ –ò–î–£–¢ –ü–ï–†–í–´–ú–ò! ======================
# –í—Å–µ —Ä–æ—É—Ç—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ /{master_id}

# ---------------------- Endpoints for current master ----------------------
@router.get("/my-profile", response_model=MasterResponse)
async def get_my_profile(
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        print(f"üîç Getting profile for user: {current_user.email} (ID: {current_user.id})")
        
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            print(f"‚ö†Ô∏è No master profile found for user {current_user.email}, creating one...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            display_name = f"{current_user.first_name or ''} {current_user.last_name or ''}".strip()
            if not display_name:
                display_name = current_user.email.split('@')[0]
            
            master = Master(
                tenant_id=current_user.tenant_id,
                user_id=current_user.id,
                display_name=display_name,
                description="",
                specialization=[],
                rating=0.0,
                reviews_count=0,
                is_active=True,
                is_visible=True,
                # –ü—Ä–∞–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
                can_edit_profile=True,
                can_edit_schedule=False,
                can_edit_services=False,
                can_manage_bookings=True,
                can_view_analytics=True,
                can_upload_photos=True,
                experience_years=0,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            
            db.add(master)
            await db.commit()
            await db.refresh(master)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await create_default_schedule(master.id, db)
            
            print(f"‚úÖ Created master profile for user {current_user.email}")
        else:
            print(f"‚úÖ Found existing master profile: {master.display_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º NULL –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            if master.created_at is None:
                master.created_at = datetime.utcnow()
            if master.updated_at is None:
                master.updated_at = datetime.utcnow()
            await db.commit()
            await db.refresh(master)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            schedule_result = await db.execute(
                select(MasterSchedule).where(MasterSchedule.master_id == master.id)
            )
            existing_schedules = schedule_result.scalars().all()
            
            if not existing_schedules:
                print(f"‚ö†Ô∏è No schedule found for master {master.id}, creating default...")
                await create_default_schedule(master.id, db)
        
        return master
        
    except Exception as e:
        print(f"‚ùå Error in get_my_profile: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get master profile"
        )
@router.get("/permission-requests")
async def get_permission_requests(
    current_user: User = Depends(require_role([UserRole.OWNER, UserRole.ADMIN])),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"""
    permission_service = PermissionRequestService(db)
    requests = await permission_service.get_requests_for_tenant(current_user.tenant_id)
    
    return [
        {
            "id": str(req.id),
            "master_id": str(req.master_id),
            "permission_type": req.permission_type.value,
            "reason": req.reason,
            "additional_info": req.additional_info,
            "status": req.status.value,
            "created_at": req.created_at.isoformat(),
            "reviewed_at": req.reviewed_at.isoformat() if req.reviewed_at else None,
            "review_note": req.review_note
        }
        for req in requests
    ]

@router.get("/permission-requests/stats")
async def get_permission_requests_stats(
    current_user: User = Depends(require_role([UserRole.OWNER, UserRole.ADMIN])),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    try:
        from app.models.permission_request import PermissionRequest, PermissionRequestStatus
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞
        total_result = await db.execute(
            select(func.count()).select_from(PermissionRequest)
            .where(PermissionRequest.tenant_id == current_user.tenant_id)
        )
        total = total_result.scalar() or 0
        
        pending_result = await db.execute(
            select(func.count()).select_from(PermissionRequest)
            .where(
                and_(
                    PermissionRequest.tenant_id == current_user.tenant_id,
                    PermissionRequest.status == PermissionRequestStatus.PENDING
                )
            )
        )
        pending = pending_result.scalar() or 0
        
        approved_result = await db.execute(
            select(func.count()).select_from(PermissionRequest)
            .where(
                and_(
                    PermissionRequest.tenant_id == current_user.tenant_id,
                    PermissionRequest.status == PermissionRequestStatus.APPROVED
                )
            )
        )
        approved = approved_result.scalar() or 0
        
        rejected_result = await db.execute(
            select(func.count()).select_from(PermissionRequest)
            .where(
                and_(
                    PermissionRequest.tenant_id == current_user.tenant_id,
                    PermissionRequest.status == PermissionRequestStatus.REJECTED
                )
            )
        )
        rejected = rejected_result.scalar() or 0
        
        return {
            "total": total,
            "pending": pending,
            "approved": approved,
            "rejected": rejected
        }
        
    except Exception as e:
        print(f"Error in get_permission_requests_stats: {e}")
        return {
            "total": 0,
            "pending": 0,
            "approved": 0,
            "rejected": 0
        }

@router.put("/bulk-permissions")
async def bulk_update_master_permissions(
    updates_data: dict,
    current_user: User = Depends(require_role([UserRole.OWNER])),
    db: AsyncSession = Depends(get_db)
):
    """–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –º–∞—Å—Ç–µ—Ä–æ–≤"""
    try:
        updates = updates_data.get("updates", [])
        updated_count = 0
        
        for update in updates:
            master_id = update.get("masterId")
            permissions = update.get("permissions", {})
            
            if not master_id:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞—Å—Ç–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–º—É –∂–µ —Ç–µ–Ω–∞–Ω—Ç—É
            result = await db.execute(
                select(Master).where(
                    and_(
                        Master.id == master_id,
                        Master.tenant_id == current_user.tenant_id
                    )
                )
            )
            master = result.scalar_one_or_none()
            
            if master:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞
                for key, value in permissions.items():
                    if hasattr(master, key):
                        setattr(master, key, value)
                
                master.updated_at = datetime.utcnow()
                updated_count += 1
        
        await db.commit()
        
        return {
            "message": f"Updated permissions for {updated_count} masters",
            "updated_count": updated_count
        }
        
    except Exception as e:
        print(f"Error in bulk_update_master_permissions: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to update master permissions"
        )


@router.put("/my-profile", response_model=MasterResponse)
async def update_my_profile(
    profile_data: MasterUpdate,
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞"""
    result = await db.execute(
        select(Master).where(Master.user_id == current_user.id)
    )
    master = result.scalar_one_or_none()
    
    if not master:
        raise HTTPException(status_code=404, detail="Master profile not found")
    
    if not master.can_edit_profile:
        raise HTTPException(
            status_code=403, 
            detail="Profile editing permission required. Contact your manager."
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    update_data = profile_data.dict(exclude_unset=True)
    for key, value in update_data.items():
        setattr(master, key, value)
    
    master.updated_at = datetime.utcnow()
    await db.commit()
    await db.refresh(master)
    
    return master

@router.get("/my-stats", response_model=MasterStatsResponse)
async def get_my_stats(
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        print(f"üîç Getting stats for user: {current_user.email} (ID: {current_user.id})")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            print(f"‚ö†Ô∏è No master profile found for user {current_user.email}")
            return MasterStatsResponse()
        
        print(f"‚úÖ Found master profile: {master.display_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–±–æ–ª–µ–µ –º—è–≥–∫–æ)
        if not master.can_view_analytics:
            print(f"‚ö†Ô∏è Master {master.display_name} has no analytics permission, returning empty stats")
            return MasterStatsResponse()
        
        try:
            # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            now = datetime.utcnow()
            week_start = now - timedelta(days=7)
            month_start = now - timedelta(days=30)
            
            # –ó–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            week_bookings_result = await db.execute(
                select(func.count()).select_from(Booking)
                .where(
                    and_(
                        Booking.master_id == master.id,
                        Booking.created_at >= week_start
                    )
                )
            )
            week_bookings = week_bookings_result.scalar() or 0
            
            # –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ client_id)
            total_clients_result = await db.execute(
                select(func.count(func.distinct(Booking.client_id)))
                .where(Booking.master_id == master.id)
            )
            total_clients = total_clients_result.scalar() or 0
            
            # –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü
            month_revenue_result = await db.execute(
                select(func.coalesce(func.sum(Booking.price), 0.0))
                .where(
                    and_(
                        Booking.master_id == master.id,
                        Booking.created_at >= month_start,
                        Booking.status == BookingStatus.COMPLETED
                    )
                )
            )
            month_revenue = float(month_revenue_result.scalar() or 0.0)
            
            # –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π
            total_bookings_result = await db.execute(
                select(func.count()).select_from(Booking)
                .where(Booking.master_id == master.id)
            )
            total_bookings = total_bookings_result.scalar() or 0
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            completed_bookings_result = await db.execute(
                select(func.count()).select_from(Booking)
                .where(
                    and_(
                        Booking.master_id == master.id,
                        Booking.status == BookingStatus.COMPLETED
                    )
                )
            )
            completed_bookings = completed_bookings_result.scalar() or 0
            
            # –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            cancelled_bookings_result = await db.execute(
                select(func.count()).select_from(Booking)
                .where(
                    and_(
                        Booking.master_id == master.id,
                        Booking.status == BookingStatus.CANCELLED
                    )
                )
            )
            cancelled_bookings = cancelled_bookings_result.scalar() or 0
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω
            cancellation_rate = 0.0
            if total_bookings > 0:
                cancellation_rate = (cancelled_bookings / total_bookings) * 100
            
            return MasterStatsResponse(
                weekBookings=week_bookings,
                totalClients=total_clients,
                monthRevenue=month_revenue,
                totalBookings=total_bookings,
                completedBookings=completed_bookings,
                cancelledBookings=cancelled_bookings,
                cancellationRate=cancellation_rate
            )
            
        except Exception as stats_error:
            print(f"‚ùå Error calculating stats: {stats_error}")
            return MasterStatsResponse()
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error in get_my_stats: {e}")
        import traceback
        traceback.print_exc()
        return MasterStatsResponse()

@router.get("/my-bookings/today", response_model=TodayBookingsResponse)
async def get_my_bookings_today(
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            return TodayBookingsResponse(bookings=[], total_count=0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ø–∏—Å—è–º
        if not master.can_manage_bookings:
            print(f"‚ö†Ô∏è Master {master.display_name} has no booking management permission")
            return TodayBookingsResponse(bookings=[], total_count=0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        today = datetime.utcnow().date()
        today_start = datetime.combine(today, datetime.min.time())
        today_end = datetime.combine(today, datetime.max.time())
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        result = await db.execute(
            select(Booking).where(
                and_(
                    Booking.master_id == master.id,
                    Booking.date >= today_start,
                    Booking.date <= today_end
                )
            ).order_by(Booking.date)
        )
        bookings = result.scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        bookings_data = []
        for booking in bookings:
            bookings_data.append({
                "id": str(booking.id),
                "date": booking.date.isoformat(),
                "end_time": booking.end_time.isoformat(),
                "status": booking.status.value,
                "price": booking.price,
                "notes": booking.notes,
                "client_id": str(booking.client_id),
                "service_id": str(booking.service_id)
            })
        
        return TodayBookingsResponse(
            bookings=bookings_data,
            total_count=len(bookings_data)
        )
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error in get_my_bookings_today: {e}")
        import traceback
        traceback.print_exc()
        return TodayBookingsResponse(bookings=[], total_count=0)

@router.post("/upload-photo")
async def upload_photo(
    photo: UploadFile = File(...),
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            raise HTTPException(status_code=404, detail="Master profile not found")
        
        if not master.can_upload_photos:
            raise HTTPException(
                status_code=403,
                detail="Photo upload permission required. Contact your manager."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not photo.content_type or not photo.content_type.startswith('image/'):
            raise HTTPException(
                status_code=400,
                detail="Only image files are allowed"
            )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        upload_service = FileUploadService()
        photo_url = await upload_service.upload_master_photo(str(master.id), photo)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        master.photo_url = photo_url
        master.updated_at = datetime.utcnow()
        await db.commit()
        
        return {"photo_url": photo_url, "message": "Photo uploaded successfully"}
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error uploading photo: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to upload photo"
        )

@router.get("/my-analytics")
async def get_my_analytics(
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    try:
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            return {
                "revenue_trend": [],
                "popular_services": [],
                "client_retention": 0,
                "average_rating": 0
            }
        
        if not master.can_view_analytics:
            raise HTTPException(
                status_code=403,
                detail="Analytics viewing permission required. Contact your manager."
            )
        
        # –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        from datetime import timedelta
        
        now = datetime.now()
        month_ago = now - timedelta(days=30)
        
        # –î–æ—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        revenue_result = await db.execute(
            select(
                func.sum(Booking.price).label('revenue'),
                func.date(Booking.date).label('booking_date')
            )
            .where(and_(
                Booking.master_id == master.id,
                Booking.status == BookingStatus.COMPLETED,
                Booking.date >= month_ago
            ))
            .group_by(func.date(Booking.date))
            .order_by(func.date(Booking.date))
        )
        
        revenue_trend = [
            {
                "date": row.booking_date.isoformat(),
                "revenue": float(row.revenue or 0)
            }
            for row in revenue_result.fetchall()
        ]
        
        return {
            "revenue_trend": revenue_trend,
            "popular_services": [],  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
            "client_retention": 0,   # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
            "average_rating": float(master.rating)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error getting analytics: {e}")
        return {
            "revenue_trend": [],
            "popular_services": [],
            "client_retention": 0,
            "average_rating": 0
        }

@router.post("/request-permission")
async def request_permission(
    permission_data: dict,
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–∞
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            raise HTTPException(status_code=404, detail="Master profile not found")
        
        permission_type = permission_data.get("permission_type")
        reason = permission_data.get("reason", "")
        additional_info = permission_data.get("additional_info")
        
        if not permission_type:
            raise HTTPException(
                status_code=400,
                detail="Permission type is required"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        try:
            perm_type = PermissionRequestType(permission_type)
        except ValueError:
            raise HTTPException(
                status_code=400,
                detail="Invalid permission type"
            )
        
        permission_service = PermissionRequestService(db)
        request_obj = await permission_service.create_request(
            master.id,
            master.tenant_id,
            perm_type,
            reason,
            additional_info
        )
        
        return {
            "id": str(request_obj.id),
            "message": "Permission request submitted successfully"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error in request_permission: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to create permission request"
        )

@router.get("/my-permission-requests")
async def get_my_permission_requests(
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–∞
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            return {"requests": []}
        
        permission_service = PermissionRequestService(db)
        requests = await permission_service.get_requests_for_master(master.id)
        
        return {
            "requests": [
                {
                    "id": str(req.id),
                    "permission_type": req.permission_type.value,
                    "reason": req.reason,
                    "status": req.status.value,
                    "created_at": req.created_at.isoformat(),
                    "reviewed_at": req.reviewed_at.isoformat() if req.reviewed_at else None,
                    "review_note": req.review_note
                }
                for req in requests
            ]
        }
        
    except Exception as e:
        print(f"Error in get_my_permission_requests: {e}")
        return {"requests": []}

# ---------------------- Schedule management ----------------------
@router.get("/my-schedule")
async def get_my_schedule(
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            raise HTTPException(status_code=404, detail="Master profile not found")
        
        service = MasterService(db)
        schedule = await service.get_schedule(master.id)
        return {"schedule": schedule}
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error in get_my_schedule: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to get schedule"
        )

@router.post("/block-time")
async def block_my_time(
    block_data: dict,
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è"""
    try:
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            raise HTTPException(status_code=404, detail="Master profile not found")
        
        if not master.can_edit_schedule:
            raise HTTPException(
                status_code=403,
                detail="Schedule editing permission required. Contact your manager."
            )
        
        service = MasterService(db)
        block = await service.create_block_time(master.id, block_data)
        return {"block": block}
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error in block_my_time: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to block time"
        )

@router.put("/my-schedule")
async def update_my_schedule(
    schedule_data: dict,
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            raise HTTPException(status_code=404, detail="Master profile not found")
        
        if not master.can_edit_schedule:
            raise HTTPException(
                status_code=403,
                detail="Schedule editing permission required. Contact your manager."
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        schedules = schedule_data.get('schedules', [])
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await db.execute(
            select(MasterSchedule).where(MasterSchedule.master_id == master.id)
        )
        await db.execute(
            delete(MasterSchedule).where(MasterSchedule.master_id == master.id)
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        for schedule_item in schedules:
            schedule = MasterSchedule(
                master_id=master.id,
                day_of_week=schedule_item['day_of_week'],
                start_time=schedule_item['start_time'],
                end_time=schedule_item['end_time'],
                is_working=schedule_item.get('is_working', True)
            )
            db.add(schedule)
        
        await db.commit()
        
        return {"message": "Schedule updated successfully"}
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error in update_my_schedule: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to update schedule"
        )

# ---------------------- PUBLIC ENDPOINTS –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ----------------------
# ‚≠ê –í–ê–ñ–ù–û: –≠—Ç–∏ —Ä–æ—É—Ç—ã –∏–¥—É—Ç –ü–û–°–õ–ï —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤!
@router.get("", response_model=List[dict])
@router.get("/", response_model=List[dict], include_in_schema=False)
async def get_masters_list(
    request: Request,
    current_user: User = Depends(require_role([UserRole.OWNER, UserRole.ADMIN])),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tenant_id = current_user.tenant_id
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    result = await db.execute(
        select(Master, User).join(User, Master.user_id == User.id)
        .where(Master.tenant_id == tenant_id)
        .order_by(Master.created_at.desc())
    )
    
    masters_data = []
    for master, user in result.all():
        master_dict = {
            "id": str(master.id),
            "tenant_id": str(master.tenant_id),
            "user_id": str(master.user_id),
            "display_name": master.display_name,
            "description": master.description,
            "photo_url": master.photo_url,
            "specialization": master.specialization or [],
            "experience_years": master.experience_years or 0,
            "rating": master.rating or 0.0,
            "reviews_count": master.reviews_count or 0,
            "is_active": master.is_active,
            "is_visible": master.is_visible,
            "can_edit_profile": master.can_edit_profile,
            "can_edit_schedule": master.can_edit_schedule,
            "can_edit_services": master.can_edit_services,
            "can_manage_bookings": master.can_manage_bookings,
            "can_view_analytics": master.can_view_analytics,
            "can_upload_photos": master.can_upload_photos,
            "created_at": master.created_at.isoformat() if master.created_at else None,
            "updated_at": master.updated_at.isoformat() if master.updated_at else None,
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            "user": {
                "id": str(user.id),
                "email": user.email,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "phone": user.phone,
                "is_active": user.is_active,
                "is_verified": user.is_verified
            }
        }
        masters_data.append(master_dict)
    
    return masters_data


# ---------------------- Photo upload with master ID ----------------------
@router.post("/{master_id}/upload-photo")
async def upload_master_photo(
    master_id: UUID,
    photo: UploadFile = File(...),
    current_user: User = Depends(require_role([UserRole.OWNER, UserRole.ADMIN, UserRole.MASTER])),
    db: AsyncSession = Depends(get_db)
):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ ID"""
    try:
        result = await db.execute(
            select(Master).where(Master.id == master_id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            raise HTTPException(status_code=404, detail="Master not found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if current_user.role == UserRole.MASTER:
            # –ú–∞—Å—Ç–µ—Ä –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            if master.user_id != current_user.id:
                raise HTTPException(
                    status_code=403, 
                    detail="You can only upload photos for your own profile"
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not photo.content_type or not photo.content_type.startswith('image/'):
            raise HTTPException(
                status_code=400,
                detail="Only image files are allowed"
            )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        upload_service = FileUploadService()
        photo_url = await upload_service.upload_master_photo(str(master.id), photo)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        master.photo_url = photo_url
        master.updated_at = datetime.utcnow()
        await db.commit()
        
        return {"photo_url": photo_url, "message": "Photo uploaded successfully"}
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error uploading master photo: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to upload photo"
        )

# ‚≠ê –í–ê–ñ–ù–û: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ä–æ—É—Ç /{master_id} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í –°–ê–ú–û–ú –ö–û–ù–¶–ï!
@router.get("/{master_id}", response_model=MasterResponse)
async def get_master(
    master_id: UUID,
    request: Request,
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –ø–æ ID –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        tenant_id = await get_current_tenant(request, db)
    except HTTPException:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Tenant not specified"
        )
    
    result = await db.execute(
        select(Master).where(
            and_(
                Master.id == master_id,
                Master.tenant_id == tenant_id,
                Master.is_active == True,
                Master.is_visible == True
            )
        )
    )
    master = result.scalar_one_or_none()
    
    if not master:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Master not found"
        )
    
    return master

# ====================== –ê–î–ú–ò–ù–°–ö–ò–ï –≠–ù–î–ü–û–ò–ù–¢–´ ======================

@router.post("", response_model=MasterResponse)
@router.post("/", response_model=MasterResponse, include_in_schema=False)
async def create_master(
    master_data: MasterCreate,
    request: Request,
    current_user: User = Depends(require_role([UserRole.OWNER, UserRole.ADMIN])),
    db: AsyncSession = Depends(get_db)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤/–∞–¥–º–∏–Ω–æ–≤)"""
    tenant_id = await get_current_tenant(request, db)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–∑ —Ç–æ–≥–æ –∂–µ —Ç–µ–Ω–∞–Ω—Ç–∞
    if current_user.tenant_id != tenant_id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied"
        )
    
    service = MasterService(db)
    master = await service.create_master(tenant_id, master_data.dict())
    
    return master

@router.put("/{master_id}", response_model=MasterResponse)
async def update_master(
    master_id: UUID,
    master_data: MasterUpdate,
    current_user: User = Depends(require_role([UserRole.OWNER, UserRole.ADMIN, UserRole.MASTER])),
    db: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞—Å—Ç–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–º—É –∂–µ —Ç–µ–Ω–∞–Ω—Ç—É
    result = await db.execute(
        select(Master).where(
            and_(
                Master.id == master_id,
                Master.tenant_id == current_user.tenant_id
            )
        )
    )
    master = result.scalar_one_or_none()
    
    if not master:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Master not found"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if current_user.role == UserRole.MASTER:
        # –ú–∞—Å—Ç–µ—Ä –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        if master.user_id != current_user.id:
            raise HTTPException(
                status_code=403, 
                detail="You can only update your own profile"
            )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    update_data = master_data.dict(exclude_unset=True)
    for key, value in update_data.items():
        if hasattr(master, key):
            setattr(master, key, value)
    
    master.updated_at = datetime.utcnow()
    await db.commit()
    await db.refresh(master)
    
    return master

@router.delete("/{master_id}")
async def delete_master(
    master_id: UUID,
    current_user: User = Depends(require_role([UserRole.OWNER, UserRole.ADMIN])),
    db: AsyncSession = Depends(get_db)
):
    """–£–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤/–∞–¥–º–∏–Ω–æ–≤)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–∞—Å—Ç–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–æ–º—É –∂–µ —Ç–µ–Ω–∞–Ω—Ç—É
    result = await db.execute(
        select(Master).where(
            and_(
                Master.id == master_id,
                Master.tenant_id == current_user.tenant_id
            )
        )
    )
    master = result.scalar_one_or_none()
    
    if not master:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Master not found"
        )
    
    # –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    master.is_active = False
    master.is_visible = False
    master.updated_at = datetime.utcnow()
    
    await db.commit()
    
    return {"message": "Master deleted successfully"}

@router.put("/permission-requests/{request_id}/approve")
async def approve_permission_request(
    request_id: UUID,
    review_data: dict,
    current_user: User = Depends(require_role([UserRole.OWNER, UserRole.ADMIN])),
    db: AsyncSession = Depends(get_db)
):
    """–û–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
    permission_service = PermissionRequestService(db)
    result = await permission_service.approve_request(
        request_id,
        current_user.id,
        review_data.get("review_note", "")
    )
    
    if not result:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Permission request not found"
        )
    
    return {"message": "Permission request approved"}

@router.put("/permission-requests/{request_id}/reject")
async def reject_permission_request(
    request_id: UUID,
    review_data: dict,
    current_user: User = Depends(require_role([UserRole.OWNER, UserRole.ADMIN])),
    db: AsyncSession = Depends(get_db)
):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
    permission_service = PermissionRequestService(db)
    result = await permission_service.reject_request(
        request_id,
        current_user.id,
        review_data.get("review_note", "")
    )
    
    if not result:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Permission request not found"
        )
    
    return {"message": "Permission request rejected"}

@router.put("/{master_id}/permissions", response_model=MasterResponse)
async def update_master_permissions(
    master_id: UUID,
    permissions_data: MasterPermissionsUpdate,
    current_user: User = Depends(require_role([UserRole.OWNER])),
    db: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –º–∞—Å—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)"""
    result = await db.execute(
        select(Master).where(
            and_(
                Master.id == master_id,
                Master.tenant_id == current_user.tenant_id
            )
        )
    )
    master = result.scalar_one_or_none()
    
    if not master:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Master not found"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞
    update_data = permissions_data.dict(exclude_unset=True)
    for key, value in update_data.items():
        setattr(master, key, value)
    
    master.updated_at = datetime.utcnow()
    await db.commit()
    await db.refresh(master)
    
    return master