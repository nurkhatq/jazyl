# ‚úÖ –î–ï–ë–ê–ì –í–ï–†–°–ò–Ø - –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è 422 –æ—à–∏–±–æ–∫

from fastapi import APIRouter, Depends, HTTPException, Request, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, func
from typing import List, Optional
from uuid import UUID
from datetime import date, datetime, timedelta
from pydantic import ValidationError
import json

from app.database import get_db
from app.models.user import User, UserRole
from app.models.master import Master
from app.models.booking import Booking, BookingStatus
from app.schemas.master import MasterResponse, MasterStatsResponse, TodayBookingsResponse
from app.utils.security import get_current_master

router = APIRouter()

# ‚úÖ –î–ï–ë–ê–ì –í–ï–†–°–ò–Ø: my-profile —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@router.get("/my-profile-debug")
async def get_my_profile_debug(
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–î–ï–ë–ê–ì –≤–µ—Ä—Å–∏—è get_my_profile –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è 422 –æ—à–∏–±–∫–∏"""
    try:
        print(f"üîç [DEBUG] Getting profile for user: {current_user.email}")
        print(f"üîç [DEBUG] User ID: {current_user.id}")
        print(f"üîç [DEBUG] User tenant_id: {current_user.tenant_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            print("‚ùå [DEBUG] No master profile found")
            return {"error": "No master profile found", "user_id": str(current_user.id)}
        
        print(f"‚úÖ [DEBUG] Found master: {master.id}")
        
        # –î–ï–¢–ê–õ–¨–ù–´–ô –î–ï–ë–ê–ì –í–°–ï–• –ü–û–õ–ï–ô
        master_data = {
            "id": master.id,
            "tenant_id": master.tenant_id, 
            "user_id": master.user_id,
            "display_name": master.display_name,
            "description": master.description,
            "photo_url": master.photo_url,
            "specialization": master.specialization,
            "experience_years": master.experience_years,
            "rating": master.rating,
            "reviews_count": master.reviews_count,
            "is_active": master.is_active,
            "is_visible": master.is_visible,
            "can_edit_profile": master.can_edit_profile,
            "can_edit_schedule": master.can_edit_schedule,
            "can_edit_services": master.can_edit_services,
            "can_manage_bookings": master.can_manage_bookings,
            "can_view_analytics": master.can_view_analytics,
            "can_upload_photos": master.can_upload_photos,
            "created_at": master.created_at,
            "updated_at": master.updated_at
        }
        
        print("üìã [DEBUG] Master data:")
        for key, value in master_data.items():
            print(f"  {key}: {value} (type: {type(value)})")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –Ω–∞ None
        print("\nüîç [DEBUG] Checking for None values:")
        none_fields = []
        for key, value in master_data.items():
            if value is None:
                none_fields.append(key)
                print(f"  ‚ö†Ô∏è {key} is None")
        
        if none_fields:
            print(f"‚ùå [DEBUG] Found None fields: {none_fields}")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –æ—Ç–≤–µ—Ç–∞ –≤—Ä—É—á–Ω—É—é
        print("\nüß™ [DEBUG] Testing MasterResponse validation...")
        try:
            response = MasterResponse(**master_data)
            print("‚úÖ [DEBUG] MasterResponse validation successful!")
            return response.dict()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ dict –¥–ª—è –¥–µ–±–∞–≥–∞
        except ValidationError as ve:
            print(f"‚ùå [DEBUG] Pydantic validation error:")
            print(f"  Error details: {ve.errors()}")
            print(f"  Error JSON: {ve.json()}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
            return {
                "validation_error": True,
                "errors": ve.errors(),
                "master_data": master_data,
                "none_fields": none_fields
            }
        except Exception as e:
            print(f"‚ùå [DEBUG] Unexpected error in validation: {e}")
            return {
                "unexpected_error": str(e),
                "master_data": master_data
            }
            
    except Exception as e:
        print(f"‚ùå [DEBUG] Error in get_my_profile_debug: {e}")
        import traceback
        traceback.print_exc()
        return {"error": str(e), "traceback": traceback.format_exc()}

# ‚úÖ –î–ï–ë–ê–ì –í–ï–†–°–ò–Ø: my-stats —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@router.get("/my-stats-debug") 
async def get_my_stats_debug(
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–î–ï–ë–ê–ì –≤–µ—Ä—Å–∏—è get_my_stats –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è 422 –æ—à–∏–±–∫–∏"""
    try:
        print(f"üîç [DEBUG] Getting stats for user: {current_user.email}")
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–∞
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            print("‚ùå [DEBUG] No master profile found for stats")
            return {"error": "No master profile found"}
        
        print(f"‚úÖ [DEBUG] Found master for stats: {master.display_name}")
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_data = {
            "weekBookings": 0,
            "totalClients": 0,
            "monthRevenue": 0.0,
            "totalBookings": 0,
            "completedBookings": 0,
            "cancelledBookings": 0,
            "cancellationRate": 0.0
        }
        
        print("üìã [DEBUG] Stats data:")
        for key, value in stats_data.items():
            print(f"  {key}: {value} (type: {type(value)})")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –æ—Ç–≤–µ—Ç–∞
        print("\nüß™ [DEBUG] Testing MasterStatsResponse validation...")
        try:
            response = MasterStatsResponse(**stats_data)
            print("‚úÖ [DEBUG] MasterStatsResponse validation successful!")
            return response.dict()
        except ValidationError as ve:
            print(f"‚ùå [DEBUG] Stats validation error:")
            print(f"  Error details: {ve.errors()}")
            return {
                "validation_error": True,
                "errors": ve.errors(),
                "stats_data": stats_data
            }
        except Exception as e:
            print(f"‚ùå [DEBUG] Unexpected error in stats validation: {e}")
            return {
                "unexpected_error": str(e),
                "stats_data": stats_data
            }
            
    except Exception as e:
        print(f"‚ùå [DEBUG] Error in get_my_stats_debug: {e}")
        import traceback
        traceback.print_exc()
        return {"error": str(e), "traceback": traceback.format_exc()}

# ‚úÖ –î–ï–ë–ê–ì: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@router.get("/debug-db-master")
async def debug_db_master(
    current_user: User = Depends(get_current_master),
    db: AsyncSession = Depends(get_db)
):
    """–ü—Ä—è–º–æ–π –¥–µ–±–∞–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–∞"""
    try:
        print(f"üîç [DEBUG] Direct DB access for user: {current_user.email}")
        
        # –ü—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
        result = await db.execute(
            select(Master).where(Master.user_id == current_user.id)
        )
        master = result.scalar_one_or_none()
        
        if not master:
            return {"error": "No master found"}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –º–æ–¥–µ–ª–∏
        master_dict = {}
        for column in master.__table__.columns:
            value = getattr(master, column.name)
            master_dict[column.name] = value
            print(f"  {column.name}: {value} (SQL type: {column.type}, Python type: {type(value)})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤ —Å—Ö–µ–º–µ
        print("\nüîç [DEBUG] Checking all master attributes:")
        for attr_name in dir(master):
            if not attr_name.startswith('_') and not callable(getattr(master, attr_name)):
                attr_value = getattr(master, attr_name)
                print(f"  {attr_name}: {attr_value} (type: {type(attr_value)})")
        
        return {
            "master_id": str(master.id),
            "raw_data": master_dict,
            "table_columns": [col.name for col in master.__table__.columns]
        }
        
    except Exception as e:
        print(f"‚ùå [DEBUG] Error in debug_db_master: {e}")
        import traceback
        traceback.print_exc()
        return {"error": str(e), "traceback": traceback.format_exc()}