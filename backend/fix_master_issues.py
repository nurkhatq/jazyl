#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º –º–∞—Å—Ç–µ—Ä–∞
–ó–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞: python fix_master_issues.py
"""

import asyncio
import sys
import os
from sqlalchemy import text, inspect
from sqlalchemy.ext.asyncio import AsyncSession

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from app.database import get_db, engine
from app.models.user import User, UserRole
from app.models.master import Master
from app.models.booking import Booking

async def check_database_structure():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    async with engine.begin() as conn:
        inspector = inspect(conn.sync_connection)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É masters
        if 'masters' not in inspector.get_table_names():
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'masters' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        columns = [col['name'] for col in inspector.get_columns('masters')]
        print(f"üìã –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ masters: {columns}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = [
            'id', 'tenant_id', 'user_id', 'display_name', 'is_active', 'is_visible',
            'can_edit_profile', 'can_edit_schedule', 'can_edit_services',
            'can_manage_bookings', 'can_view_analytics', 'can_upload_photos',
            'experience_years'
        ]
        
        missing_fields = [field for field in required_fields if field not in columns]
        
        if missing_fields:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {missing_fields}")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: alembic upgrade head")
            return False
        else:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True

async def check_master_profiles():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –º–∞—Å—Ç–µ—Ä–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –º–∞—Å—Ç–µ—Ä–æ–≤...")
    
    async for db in get_db():
        try:
            # –ù–∞–π–¥–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é MASTER
            result = await db.execute(
                text("SELECT id, email, first_name, last_name, tenant_id FROM users WHERE role = 'MASTER'")
            )
            master_users = result.fetchall()
            
            print(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é MASTER: {len(master_users)}")
            
            for user in master_users:
                print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email} (ID: {user.id})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞
                result = await db.execute(
                    text("SELECT id, display_name, can_edit_profile FROM masters WHERE user_id = :user_id"),
                    {"user_id": user.id}
                )
                master_profile = result.fetchone()
                
                if master_profile:
                    print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω: {master_profile.display_name}")
                    print(f"   –ü—Ä–∞–≤–∞: can_edit_profile = {master_profile.can_edit_profile}")
                else:
                    print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞ –ù–ï –ù–ê–ô–î–ï–ù!")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞
                    display_name = f"{user.first_name} {user.last_name or ''}".strip()
                    await db.execute(
                        text("""
                        INSERT INTO masters (
                            id, tenant_id, user_id, display_name, description, 
                            specialization, rating, reviews_count, is_active, is_visible,
                            can_edit_profile, can_edit_schedule, can_edit_services,
                            can_manage_bookings, can_view_analytics, can_upload_photos,
                            experience_years, created_at, updated_at
                        ) VALUES (
                            gen_random_uuid(), :tenant_id, :user_id, :display_name, '',
                            '[]'::json, 0.0, 0, true, true,
                            true, false, false,
                            true, true, true,
                            0, NOW(), NOW()
                        )
                        """),
                        {
                            "tenant_id": user.tenant_id,
                            "user_id": user.id,
                            "display_name": display_name
                        }
                    )
                    await db.commit()
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞: {display_name}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
            await db.rollback()
        finally:
            break

async def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    # –≠—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
    endpoints = [
        "/api/masters/my-profile",
        "/api/masters/my-stats", 
        "/api/masters/my-bookings/today",
        "/api/masters/my-bookings",
        "/api/masters/my-schedule",
        "/api/masters/my-permission-requests"
    ]
    
    print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    for endpoint in endpoints:
        print(f"   {endpoint}")
    
    print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   curl -H 'Authorization: Bearer <token>' http://localhost:8000/api/masters/my-profile")

async def check_permissions_table():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É permission_requests...")
    
    async with engine.begin() as conn:
        inspector = inspect(conn.sync_connection)
        
        if 'permission_requests' not in inspector.get_table_names():
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'permission_requests' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã permission_requests")
            return False
        
        columns = [col['name'] for col in inspector.get_columns('permission_requests')]
        print(f"üìã –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ permission_requests: {columns}")
        return True

async def run_diagnostics():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º –º–∞—Å—Ç–µ—Ä–∞...")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    db_ok = await check_database_structure()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –º–∞—Å—Ç–µ—Ä–æ–≤
    if db_ok:
        await check_master_profiles()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    await check_permissions_table()
    
    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    await test_api_endpoints()
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: alembic upgrade head")
    print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend: docker-compose restart jazyl-backend")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs jazyl-backend")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥")

async def create_missing_permissions_table():
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É permission_requests –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    print("\nüîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É permission_requests...")
    
    async with engine.begin() as conn:
        await conn.execute(text("""
        CREATE TABLE IF NOT EXISTS permission_requests (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            master_id UUID NOT NULL REFERENCES masters(id) ON DELETE CASCADE,
            permission_type VARCHAR(50) NOT NULL,
            reason TEXT,
            additional_info TEXT,
            status VARCHAR(20) DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT NOW(),
            reviewed_at TIMESTAMP,
            reviewed_by UUID REFERENCES users(id),
            review_note TEXT
        );
        """))
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ permission_requests —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

if __name__ == "__main__":
    print("üîß –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º –º–∞—Å—Ç–µ—Ä–∞")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞!")
    
    try:
        asyncio.run(run_diagnostics())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")