"""Fix master timestamps and display_name

Revision ID: 004
Revises: 003
Create Date: 2025-09-16 12:30:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers
revision = '004'
down_revision = '003'  
branch_labels = None
depends_on = None

def upgrade() -> None:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ display_name"""
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã masters
    if 'masters' not in inspector.get_table_names():
        print("‚ö†Ô∏è Masters table not found, skipping migration")
        return
    
    print("üîß Fixing master timestamps and display_name...")
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è –≤ created_at
    op.execute(sa.text("""
        UPDATE masters 
        SET created_at = NOW() 
        WHERE created_at IS NULL
    """))
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º NULL –∑–Ω–∞—á–µ–Ω–∏—è –≤ updated_at
    op.execute(sa.text("""
        UPDATE masters 
        SET updated_at = NOW() 
        WHERE updated_at IS NULL
    """))
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º NULL –∏–ª–∏ –ø—É—Å—Ç—ã–µ display_name
    op.execute(sa.text("""
        UPDATE masters 
        SET display_name = COALESCE(
            NULLIF(TRIM(display_name), ''),
            SPLIT_PART(
                (SELECT email FROM users WHERE users.id = masters.user_id),
                '@', 1
            ),
            'Master'
        )
        WHERE display_name IS NULL OR TRIM(display_name) = ''
    """))
    
    # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NOT NULL –¥–ª—è created_at –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    columns = [col['name'] for col in inspector.get_columns('masters')]
    created_at_col = next((col for col in inspector.get_columns('masters') if col['name'] == 'created_at'), None)
    
    if created_at_col and created_at_col.get('nullable', True):
        op.alter_column('masters', 'created_at', nullable=False)
    
    # 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NOT NULL –¥–ª—è updated_at –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω  
    updated_at_col = next((col for col in inspector.get_columns('masters') if col['name'] == 'updated_at'), None)
    
    if updated_at_col and updated_at_col.get('nullable', True):
        op.alter_column('masters', 'updated_at', nullable=False)
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    permissions_fields = [
        'can_edit_profile',
        'can_edit_schedule', 
        'can_edit_services',
        'can_manage_bookings',
        'can_view_analytics',
        'can_upload_photos'
    ]
    
    for field in permissions_fields:
        if field not in columns:
            print(f"‚ûï Adding missing field: {field}")
            default_value = 'true' if field in ['can_edit_profile', 'can_manage_bookings', 'can_view_analytics', 'can_upload_photos'] else 'false'
            op.add_column('masters', sa.Column(field, sa.Boolean(), nullable=False, server_default=default_value))
    
    # 7. –î–æ–±–∞–≤–ª—è–µ–º experience_years –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'experience_years' not in columns:
        print("‚ûï Adding experience_years field")
        op.add_column('masters', sa.Column('experience_years', sa.Integer(), nullable=False, server_default='0'))
    
    print("‚úÖ Master timestamps and fields fixed successfully!")

def downgrade() -> None:
    """–û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–∫–∞—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
    pass